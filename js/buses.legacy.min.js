'use strict';

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DateUtils = function () {
  function DateUtils() {
    _classCallCheck(this, DateUtils);
  }

  DateUtils.formatNumber_ = function formatNumber_(number) {
    var result = number.toString();
    return result.length == 1 ? '0' + result : result;
  };

  DateUtils.formatDate = function formatDate(y, m, d) {
    var result = y.toString();
    if (m) {
      result += '-' + DateUtils.formatNumber_(m);
    }
    if (d) {
      result += '-' + DateUtils.formatNumber_(d);
    }
    return result;
  };

  DateUtils.toYearMonth = function toYearMonth(date) {
    var monthIndexMinusOne = date.indexOf('-');
    if (monthIndexMinusOne == -1) return date;
    var dayIndexMinusOne = date.indexOf('-', monthIndexMinusOne + 1);
    if (dayIndexMinusOne == -1) return date;
    return date.substr(0, dayIndexMinusOne);
  };

  DateUtils.nextMonth = function nextMonth(date) {
    var components = date.split('-');
    components[1]++;
    if (components[1] > 12) {
      components[0] += components[1] / 12;
      components[1] %= 12;
    }
    if (components[2] && components[2] > DateUtils.daysInMonthsMap_[components[1]]) components[2] = DateUtils.daysInMonthsMap_[components[1]];
    return DateUtils.formatDate.apply(null, components);
  };

  DateUtils.previousMonth = function previousMonth(date) {
    var components = date;
    if (typeof date == 'string') components = date.split('-');
    components[1]--;
    if (components[1] == 0) {
      components[0]--;
      components[1] = 12;
    }
    if (components[2] && components[2] > DateUtils.daysInMonthsMap_[components[1]]) components[2] = DateUtils.daysInMonth(components[1]);
    return DateUtils.formatDate.apply(null, components);
  };

  DateUtils.yesterday = function yesterday(date) {
    var components = date.split('-');
    components[2]--;
    if (components[2] == 0) {
      var ym = DateUtils.previousMonth(components.slice(0, 2));
      var ymc = ym.split('-');
      return ym + '-' + DateUtils.formatNumber_(DateUtils.daysInMonth(ymc[0], ymc[1]));
    }
  };

  DateUtils.isLeapYear = function isLeapYear(year) {
    year = parseInt(year);
    return year % 400 == 0 || year % 100 != 0 && year % 4 == 0;
  };

  DateUtils.daysInMonth = function daysInMonth(year, month) {
    month = parseInt(month);
    return month == 2 && isLeapYear(year) ? 29 : DateUtils.daysInMonthsMap_[month];
  };

  return DateUtils;
}();

DateUtils.daysInMonthsMap_ = [undefined, // 0
31, // Jan
28, // Feb (NON LEAP YEAR)
31, // Mar
30, // Apr
31, // May
30, // Jun
31, // Jul
31, // Aug
30, // Sep
31, // Oct
30, // Nov
31];

var LineDataManager = function () {
  function LineDataManager(manifest) {
    _classCallCheck(this, LineDataManager);

    this.manifest = manifest;
    this.loadedLineData_ = {};
    this.lineData_ = {};

    var today = new Date();
    today.setMinutes(today.getMinutes() - today.getTimezoneOffset());
    this.today_ = today.toISOString().substr(0, 10);

    this.earliestDate = Object.keys(manifest.archives || {}).map(function (source) {
      return manifest.archives[source].start_date;
    }).concat([manifest.start_date]).reduce(function (result, date) {
      return date < result ? date : result;
    }, '9999-99-99');

    this.initializeLineNameMap_(manifest);
  }

  LineDataManager.prototype.initializeLineNameMap_ = function initializeLineNameMap_(manifest) {
    var _this = this;

    this.lineNameMap_ = {};
    var existingLines = {};
    manifest.sources.forEach(function (source) {
      _this.lineNameMap_[source] = {};
      if (manifest.lines[source]) {
        manifest.lines[source].forEach(function (lineName) {
          if (lineName != '__+BEGIN_LINES+__' && lineName != '__+END_LINES+__' && existingLines[lineName]) {
            var i = void 0;
            for (i = 2; existingLines[lineName + '_' + i]; ++i) {}
            existingLines[lineName + '_' + i] = true;
            _this.lineNameMap_[source][lineName] = lineName + '_' + i;
          } else {
            existingLines[lineName] = true;
          }
        });
      }
    });
  };

  LineDataManager.prototype.appendLineDataToLoad_ = function appendLineDataToLoad_(dataToLoad, month, sourceOrSources) {
    var _this2 = this;

    if (typeof sourceOrSources == 'string') sourceOrSources = [sourceOrSources];else if (sourceOrSources == undefined) {
      sourceOrSources = this.manifest.sources;
    }
    Array.prototype.push.apply(dataToLoad, sourceOrSources.filter(function (source) {
      return !_this2.loadedLineData_[month] || !_this2.loadedLineData_[month][source];
    }).map(function (source) {
      return { month: month, source: source };
    }));
    return dataToLoad;
  };

  LineDataManager.prototype.isRangeOverlapped_ = function isRangeOverlapped_(start1, end1, start2, end2) {
    return start1 <= end2 && end1 >= start2;
  };

  LineDataManager.prototype.getDataToLoad_ = function getDataToLoad_(startDate, endDate) {
    var _this3 = this;

    var dataToLoad = [];
    if (this.isRangeOverlapped_(startDate, endDate, this.manifest.start_date, this.today_)) {
      this.appendLineDataToLoad_(dataToLoad, 'current');
    }

    if (startDate < this.manifest.start_date) {
      // [-inf, manifest.start_date) and [startDate, endDate] have intersection
      if (startDate < this.earliestDate) startDate = this.earliestDate;
      if (endDate >= this.manifest.start_date) endDate = DateUtils.yesterday(this.manifest.start_date);

      if (startDate <= endDate) {
        var startMonth = DateUtils.toYearMonth(startDate);
        var endMonth = DateUtils.toYearMonth(endDate);
        var archivedSources = Object.keys(this.manifest.archives || {}).map(function (source) {
          var result = Object.assign({}, _this3.manifest.archives[source], { name: source });
          result.start_month = DateUtils.toYearMonth(result.start_date);
          result.end_month = DateUtils.toYearMonth(result.end_date);
          return result;
        }).filter(function (source) {
          return _this3.isRangeOverlapped_(startDate, endDate, source.start_date, source.end_date);
        });

        var _loop = function _loop(currentMonth) {
          _this3.appendLineDataToLoad_(dataToLoad, currentMonth, archivedSources.filter(function (source) {
            return currentMonth >= source.start_month && currentMonth <= source.end_month;
          }).map(function (source) {
            return source.name;
          }));
        };

        for (var currentMonth = DateUtils.toYearMonth(startDate); currentMonth <= DateUtils.toYearMonth(endDate); currentMonth = DateUtils.nextMonth(currentMonth)) {
          _loop(currentMonth);
        }
      }
    }

    return dataToLoad;
  };

  LineDataManager.prototype.load = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(startDate, endDate) {
      var _this4 = this;

      var dataToLoad, _loop2, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

      return regeneratorRuntime.wrap(function _callee$(_context2) {
        while (1) {
          switch (_context2.prev = _context2.next) {
            case 0:
              dataToLoad = this.getDataToLoad_(startDate, endDate);
              _loop2 = /*#__PURE__*/regeneratorRuntime.mark(function _loop2(item) {
                var path;
                return regeneratorRuntime.wrap(function _loop2$(_context) {
                  while (1) {
                    switch (_context.prev = _context.next) {
                      case 0:
                        path = void 0;

                        if (item.month == 'current') {
                          path = _this4.manifest.data[item.source];
                        } else {
                          path = _this4.manifest.archives[item.source].path + item.month.replace('-', '') + '.json';
                        }
                        _context.next = 4;
                        return fetch(path).then(function (x) {
                          return x.json();
                        }).then(function (data) {
                          if (!_this4.loadedLineData_[item.month]) _this4.loadedLineData_[item.month] = {};
                          _this4.loadedLineData_[item.month][item.source] = data;
                          _this4.importData_(item.month, item.source);
                          item.loaded = true;
                          _this4.onUpdateProgress && _this4.onUpdateProgress(dataToLoad, item.month, item.source, 1, 1);
                        })['catch'](function (_) {
                          return item.loaded = false;
                        }, Promise.resolve());

                      case 4:
                      case 'end':
                        return _context.stop();
                    }
                  }
                }, _loop2, _this4);
              });
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context2.prev = 5;
              _iterator = dataToLoad[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context2.next = 13;
                break;
              }

              item = _step.value;
              return _context2.delegateYield(_loop2(item), 't0', 10);

            case 10:
              _iteratorNormalCompletion = true;
              _context2.next = 7;
              break;

            case 13:
              _context2.next = 19;
              break;

            case 15:
              _context2.prev = 15;
              _context2.t1 = _context2['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context2.t1;

            case 19:
              _context2.prev = 19;
              _context2.prev = 20;

              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }

            case 22:
              _context2.prev = 22;

              if (!_didIteratorError) {
                _context2.next = 25;
                break;
              }

              throw _iteratorError;

            case 25:
              return _context2.finish(22);

            case 26:
              return _context2.finish(19);

            case 27:
              return _context2.abrupt('return', dataToLoad);

            case 28:
            case 'end':
              return _context2.stop();
          }
        }
      }, _callee, this, [[5, 15, 19, 27], [20,, 22, 26]]);
    }));

    function load(_x, _x2) {
      return _ref.apply(this, arguments);
    }

    return load;
  }();

  LineDataManager.prototype.importData_ = function importData_(month, source) {
    var _this5 = this;

    var data = this.loadedLineData_[month][source];
    Object.keys(data).forEach(function (line) {
      var lineName = _this5.lineNameMap_[source][line] || line;
      if (!_this5.lineData_[lineName]) _this5.lineData_[lineName] = {};
      _this5.lineData_[lineName][month] = data[line];
    });
  };

  LineDataManager.prototype.isDataLoaded = function isDataLoaded(startDate, endDate) {
    return this.getDataToLoad_(startDate, endDate).length == 0;
  };

  LineDataManager.prototype.getMonthsByRange_ = function getMonthsByRange_(startDate, endDate) {
    var _this6 = this;

    return Object.keys(this.loadedLineData_).filter(function (month) {
      if (month == 'current') {
        return _this6.isRangeOverlapped_(startDate, endDate, _this6.manifest.start_date, _this6.today_);
      } else {
        return DateUtils.toYearMonth(startDate) <= month && DateUtils.toYearMonth(endDate) >= month;
      }
    });
  };

  LineDataManager.prototype.queryLines = function queryLines(lineOrLines, startDate, endDate) {
    var _this7 = this;

    if (typeof lineOrLines == 'string') {
      lineOrLines = [lineOrLines];
    }

    var allBusesMap = {};
    var lineDetailsMap = {};

    lineOrLines.forEach(function (line, lineIndex) {
      _this7.getMonthsByRange_(startDate, endDate).sort().forEach(function (month) {
        // Note: 'current' is always sorted after yyyy-mm.
        var currentLineData = _this7.lineData_[line][month];
        if (!currentLineData) return;
        currentLineData.buses.forEach(function (bus) {
          if (!allBusesMap[bus.licenseId]) {
            allBusesMap[bus.licenseId] = Object.assign({}, bus);
          } else if (allBusesMap[bus.licenseId].busId != bus.busId) {
            allBusesMap[bus.licenseId].busId = bus.busId;
          }
        });

        currentLineData.details.filter(function (day) {
          return day[0] >= startDate && day[0] <= endDate;
        }).forEach(function (day) {
          if (!lineDetailsMap[day[0]]) {
            lineDetailsMap[day[0]] = {};
          }
          for (var i = 0; i < currentLineData.buses.length; ++i) {
            var licenseId = currentLineData.buses[i].licenseId;
            if (!lineDetailsMap[day[0]][licenseId]) lineDetailsMap[day[0]][licenseId] = new Array(lineOrLines.length).fill(0);
            var currentWeight = day[1][i];
            lineDetailsMap[day[0]][licenseId][lineIndex] = currentWeight;
            if (currentWeight > 0) {
              allBusesMap[licenseId]['hasWeight'] = true;
            }
          }
        });
      });
    });

    var buses = this.sortBuses_(Object.keys(allBusesMap).filter(function (licenseId) {
      return allBusesMap[licenseId]['hasWeight'];
    }).map(function (licenseId) {
      return allBusesMap[licenseId];
    }));

    var allZeroes = new Array(lineOrLines.length).fill(0);
    var details = Object.keys(lineDetailsMap).sort().map(function (date) {
      return [date, buses.map(function (bus) {
        return lineDetailsMap[date][bus.licenseId] || allZeroes;
      })];
    });

    return { buses: buses, details: details };
  };

  LineDataManager.prototype.containsLines = function containsLines(lineOrLines) {
    var _this8 = this;

    if (typeof lineOrLines == 'string') lineOrLines = [lineOrLines];
    return !lineOrLines.some(function (line) {
      return !_this8.lineData_[line];
    });
  };

  // query = {busId: [...], licenseId: [...], lines: [...]}
  // where |busId| and |licenseId| can contain:
  // * '1-1001' / '3G317'
  // * {start: '1-1001', end: '1-1008'}
  // * {prefix: '1-29'}
  //
  // Returns
  // {lines: [...], buses: [...], details: [...]}
  // where |buses| and |details| will be returned if returnDetails is true.


  LineDataManager.prototype.queryBuses = function queryBuses(query, startDate, endDate, returnDetails) {
    var _this9 = this;

    var linesSet = new Set();
    var allBusesMap = {};
    var busDetailsMap = {}; // busDetailsMap[date][licenseId][line] = weight

    (query.lines || Object.keys(this.lineData_)).forEach(function (line) {
      _this9.getMonthsByRange_(startDate, endDate).sort().forEach(function (month) {
        var currentLineData = _this9.lineData_[line][month];
        var currentLineDetails = null;
        if (!currentLineData) return;

        currentLineData.buses.forEach(function (bus, busIndex) {
          if (_this9.compareBus_(bus, query)) {
            if (!allBusesMap[bus.licenseId]) {
              allBusesMap[bus.licenseId] = Object.assign({}, bus);
            } else if (allBusesMap[bus.licenseId].busId != bus.busId) {
              allBusesMap[bus.licenseId].busId = bus.busId;
            }

            if (!currentLineDetails) currentLineDetails = currentLineData.details.filter(function (day) {
              return day[0] >= startDate && day[0] <= endDate;
            });
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = currentLineDetails[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var day = _step2.value;

                if (!busDetailsMap[day[0]]) {
                  busDetailsMap[day[0]] = {};
                }

                var weight = day[1][busIndex];
                if (weight > 0) {
                  if (!busDetailsMap[day[0]][bus.licenseId]) {
                    busDetailsMap[day[0]][bus.licenseId] = {};
                  }
                  busDetailsMap[day[0]][bus.licenseId][line] = weight;

                  linesSet.add(line);
                  if (!returnDetails) break;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                  _iterator2['return']();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        });
      });
    });

    var lines = this.sortLines_(Array.from(linesSet));
    if (!returnDetails) return { lines: lines };

    var buses = this.sortBuses_(Object.keys(allBusesMap).map(function (licenseId) {
      return allBusesMap[licenseId];
    }));
    var details = Object.keys(busDetailsMap).sort().map(function (date) {
      return [date, buses.map(function (bus) {
        return lines.map(function (line) {
          return (busDetailsMap[date][bus.licenseId] || {})[line] || 0;
        });
      })];
    });
    return { lines: lines, buses: buses, details: details };
  };

  LineDataManager.prototype.compareBus_ = function compareBus_(bus, query) {
    var result = false;
    ['busId', 'licenseId'].forEach(function (queryKey) {
      if (query[queryKey]) {
        result |= query[queryKey].some(function (busIdQuery) {
          if (typeof busIdQuery == 'string') {
            return bus[queryKey] == busIdQuery;
          } else if (busIdQuery.start && busIdQuery.end) {
            return bus[queryKey] >= busIdQuery.start && bus[queryKey] <= busIdQuery.end;
          } else if (busIdQuery.prefix) {
            return bus[queryKey].substr(0, busIdQuery.prefix.length) == busIdQuery.prefix;
          }
        });
      }
    });
    return result;
  };

  LineDataManager.prototype.getLines = function getLines() {
    return this.sortLines_(Object.keys(this.lineData_));
  };

  LineDataManager.prototype.sortLines_ = function sortLines_(lines) {
    var plainSort = this.linesSortOrder == 'plain';

    return lines.sort(function (a, b) {
      var ia = parseInt(a);
      var ib = parseInt(b);
      var defaultComparisonResult = void 0;

      if (a < b) defaultComparisonResult = -1;else if (a > b) defaultComparisonResult = 1;else defaultComparisonResult = 0;

      if (plainSort) return defaultComparisonResult;

      if (isNaN(ia) && isNaN(ib)) {
        // Neither a or b is number.
        return defaultComparisonResult;
      } else if (isNaN(ia) && !isNaN(ib)) {
        // a (NaN) > b (Number).
        return 1;
      } else if (!isNaN(ia) && isNaN(ib)) {
        // a (Number) < b (NaN).
        return -1;
      } else {
        // Both a & b are numbers.
        if (ia < ib) return -1;else if (ia > ib) return 1;else return defaultComparisonResult;
      }
    });
  };

  LineDataManager.prototype.sortBuses_ = function sortBuses_(buses) {
    return buses.sort(function (a, b) {
      if (a.busId && b.busId) {
        // Buses with busId are sorted by busId.
        if (a.busId < b.busId) return -1;else if (a.busId > b.busId) return 1;else return 0;
      } else if (a.busId && !b.busId) // a < b, buses without busId is placed after all other buses with busId.
        return -1;else if (!a.busId && b.busId) // a > b, the same as above.
        return 1;else {
        // Buses without busId are sorted by licenseId.
        if (a.licenseId < b.licenseId) return -1;else if (a.licenseId > b.licenseId) return 1;
        return 0;
      }
    });
  };

  LineDataManager.prototype.isDateRangeValid = function isDateRangeValid(start, end) {
    // TODO: Max date should be less than last_update_time in the manifest.
    return start >= this.earliestDate && end <= this.today_;
  };

  return LineDataManager;
}();

var COLOR = [106, 90, 205];
var COLOR_GREY = [160, 160, 160];
var PALETTE = [[230, 25, 75], [60, 180, 75], [255, 225, 25], [0, 130, 200], [245, 130, 48], [145, 30, 180], [70, 240, 240], [240, 50, 230], [210, 245, 60], [250, 190, 190], [0, 128, 128], [170, 110, 40], [128, 0, 0], [170, 255, 195], [128, 128, 0], [0, 0, 128]];
var lineDataManager = new LineDataManager(manifest);
var currentStartDate = void 0;
var currentEndDate = void 0;
var activeLines = [];

var lineData = {};
var lineNameMap = {};

(function () {
  var today = new Date();
  today.setMinutes(today.getMinutes() - today.getTimezoneOffset());
  currentEndDate = today.toISOString().substr(0, 10);
  var month = today.getMonth();
  today.setDate(today.getDate() - 30 + 1);
  currentStartDate = today.toISOString().substr(0, 10);
})();

function loadData() {
  var existingLines = {};
  manifest.sources.forEach(function (source) {
    lineNameMap[source] = {};
    if (manifest.lines[source]) {
      manifest.lines[source].forEach(function (lineName) {
        if (lineName != '__+BEGIN_LINES+__' && lineName != '__+END_LINES+__' && existingLines[lineName]) {
          var i;
          for (i = 2; existingLines[lineName + '_' + i]; ++i) {}
          existingLines[lineName + '_' + i] = true;
          lineNameMap[source][lineName] = lineName + '_' + i;
        } else {
          existingLines[lineName] = true;
        }
      });
    }
  });

  var progress = {};
  manifest.sources.forEach(function (source) {
    progress[source] = { total: 0, loaded: 0, weight: 1 / manifest.sources.length };
  });
  if (manifest.size_hints) {
    var remainingWeight = 1;
    var size_hints_total = 0;
    for (var k in manifest.size_hints) {
      if (manifest.size_hints[k]) size_hints_total += manifest.size_hints[k];else remainingProgress -= 1 / manifest.sources.length;
    }
    for (var k in manifest.size_hints) {
      if (manifest.size_hints[k]) {
        progress[k].weight = remainingWeight * manifest.size_hints[k] / size_hints_total;
      }
    }
  }

  function updateProgress(source, loaded, total) {
    var originalTotal = progress[source].total;
    progress[source].total = total;
    progress[source].loaded = loaded;

    if (originalTotal != total) {
      var remainingWeight = 1;
      var knownTotal = 0;
      for (var k in progress) {
        if (progress[k].total == 0) {
          remainingWeight -= progress[k].weight;
        } else {
          knownTotal += progress[k].total;
        }
      }
      for (var k in progress) {
        if (progress[k].total != 0) {
          progress[k].weight = remainingWeight * progress[k].total / knownTotal;
        }
      }
    }

    var progressValue = 0;
    for (var k in progress) {
      if (progress[k].total != 0) progressValue += progress[k].loaded / progress[k].total * progress[k].weight;
    }

    if (progressValue > 1) progressValue = 1;
    if (isNaN(progressValue)) progressValue = 0; // Strange IE bug
    document.getElementById('progressbar').style.width = progressValue * 100 + '%';
    document.getElementById('progressbar').innerText = 'Loading...' + Math.round(progressValue * 100) + '%';
  }

  Promise.all(manifest.sources.map(function (source) {
    return new Promise(function (resolve, reject) {
      var path = manifest.data[source];
      var xhr = new XMLHttpRequest();
      xhr.open('GET', path, true);
      xhr.onreadystatechange = function () {
        if (xhr.readyState == 4 && xhr.status == 200) {
          var json = xhr.responseText;
          if (json.indexOf('__BUS_LINE_DATA') != -1) {
            json = json.replace(/var __BUS_LINE_DATA=JSON\.parse\('|\\\n|'\)$/g, '');
          }
          var data = JSON.parse(json);
          for (var line in data) {
            var lineName = line;
            if (lineNameMap[source] && lineNameMap[source][line]) lineName = lineNameMap[source][line];
            var lineDetails = data[line];
            if (lineData[lineName]) {
              console.warn('New line name conflict!');
              var i;
              for (i = 2; lineData[lineName + '_' + i]; ++i) {}
              lineData[lineName + '_' + i] = lineDetails;
            } else lineData[lineName] = lineDetails;
          }
          updateProgress(source, 1, 1);
          resolve();
        } else if (xhr.readyState == 4) {
          // TODO: Error handling.
          // Note: Still resolve() because Promise.all does not wait for other pending promises if any one rejects.
          resolve();
        }
      };
      xhr.onprogress = function (e) {
        if (e.lengthComputable) {
          updateProgress(source, e.loaded, e.total);
        }
      };
      xhr.send();
    });
  })).then(function () {
    document.getElementById('progress').style.display = 'none';
    updateLineChooser(lineDataManager.getLines());
    if (!parseUrlHash()) showLinesNew(lineChooser.children[0].value);
    loadRemoteManifest();
  });
}

function loadRemoteManifest() {
  fetch('manifest.json', { cache: 'no-cache' }).then(function (r) {
    return r.json();
  }).then(function (manifest) {
    document.getElementById('last_update_container').style.display = '';
    document.getElementById('last_update_time').appendChild(document.createTextNode(manifest.last_update_time));
  })['catch'](function (_) {
    document.getElementById('offline_prompt').style.display = '';
  });
}

function isBusIdContinuous(a, b) {
  if (a.substr(0, 2) != b.substr(0, 2)) return false;
  var ia = parseInt(a.substr(2));
  var ib = parseInt(b.substr(2));
  if (ia == ib + 1 || ib == ia + 1) return true;else if (a.substr(0, 2) == '5-' && (ia % 10 == 3 && ia + 2 == ib || ib % 10 == 3 && ib + 2 == ia)) return true;
  return false;
}

function updateLineChooser(lines) {
  var lineChooser = document.getElementById('lineChooser');
  lines.forEach(function (line) {
    var option = document.createElement('option');
    option.value = line;
    option.appendChild(document.createTextNode(line));
    lineChooser.appendChild(option);
  });
}

function fillTr(data, th, attrs) {
  var tr = document.createElement('tr');
  Array.prototype.forEach.call(data, function (item, index) {
    var td = document.createElement(th ? 'th' : 'td');
    if (attrs && attrs[index]) for (var x in attrs[index]) {
      td.setAttribute(x, attrs[index][x]);
    }td.appendChild(document.createTextNode(item));
    tr.appendChild(td);
  });
  return tr;
}

function removeChildren(parent) {
  while (parent.hasChildNodes()) {
    parent.removeChild(parent.childNodes[0]);
  }
}

function createTableHeader(allBuses) {
  var thead = document.createElement('thead');

  var tr = document.createElement('tr');
  var th = document.createElement('th');
  th.appendChild(document.createTextNode('Bus ID'));
  tr.appendChild(th);
  var previousTd = null;
  var inRange = false;
  var odd = false;
  var elementClass = '';
  for (var i = 0; i < allBuses.length; ++i) {
    var td = document.createElement('th');
    td.appendChild(document.createTextNode(allBuses[i].busId));
    tr.appendChild(td);

    elementClass = odd ? 'busid_odd_range_element' : 'busid_even_range_element';
    if (i > 0 && isBusIdContinuous(allBuses[i - 1].busId, allBuses[i].busId)) {
      if (inRange) {
        // The same range continues.
        previousTd.className = elementClass;
      } else {
        // A new range begins.
        previousTd.className = 'busid_range_begin ' + elementClass;
        inRange = true;
      }
    } else {
      if (inRange) {
        // The previous td is the end of the range.
        inRange = false;
        previousTd.className = 'busid_range_end ' + elementClass;
        odd = !odd;
      }
    }
    previousTd = td;
  }
  if (inRange) {
    previousTd.className = 'busid_range_end ' + elementClass;
  }

  thead.appendChild(tr);

  thead.appendChild(fillTr(["License ID"].concat(allBuses.map(function (bus) {
    return bus.licenseId;
  })), true));
  return thead;
}

function getFilteredLineData(lines) {
  if (typeof lines == 'string') {
    var details = lineData[lines].details.filter(function (day) {
      return day[0] >= currentStartDate && day[0] <= currentEndDate;
    }).slice();
    var buses = lineData[lines].buses;
    var weightSums = new Array(buses.length).fill(0);
    details.forEach(function (day) {
      return day[1].forEach(function (weight, index) {
        return weightSums[index] += weight;
      });
    });
    var zeroWeightFilter = function zeroWeightFilter(_, index) {
      return weightSums[index] > 0;
    };
    return {
      buses: buses.filter(zeroWeightFilter),
      details: details.map(function (day) {
        return [day[0], day[1].filter(zeroWeightFilter)];
      })
    };
  } else {
    console.error('Not implemented');
  }
}

function showLine(line) {
  var content = document.getElementById('content');
  removeChildren(content);
  if (!lineData[line]) {
    content.appendChild(document.createTextNode('Line ' + line + ' does not exist!'));
    return;
  }

  var data = getFilteredLineData(line);

  var table = document.createElement('table');
  table.appendChild(createTableHeader(data.buses));
  var tbody = document.createElement('tbody');
  data.details.forEach(function (day) {
    tbody.appendChild(fillTr([day[0]].concat(new Array(day[1].length).fill('')), false, [''].concat(day[1].map(function (weight) {
      return { style: 'background-color:rgb(' + COLOR.map(function (value) {
          return parseInt((255 - value) * (1 - weight) + value);
        }).join(',') + ')' };
    }))));
  });
  table.appendChild(tbody);
  content.appendChild(table);
}

function busCompareFunction(query) {
  if (query.length == 6) {
    return function (bus) {
      return bus.busId[0] == query[0] && bus.busId.substr(2) == query.substr(2);
    };
  } else {
    // if (query.length >= 5)
    return function (bus) {
      return bus.licenseId == query.substr(Math.max(query.length - 5, 0));
    };
  }
}

function convertBusQuery(queryInput) {
  var rangeSeparatorRegExStr = '(?:~|～)';
  var busIdRegExStr = '([0-9])(?:0|-)([0-9]{4})';
  var licenseIdRegExStr = '(?:苏\s*E[^0-9A-Z]{0,4})?([0-9A-Z]{5}|[0-9]{5}(?:D|F))';
  var busIdRegEx = new RegExp('^' + busIdRegExStr + '$');
  var busIdRangeRegEx = new RegExp('^' + busIdRegExStr + rangeSeparatorRegExStr + busIdRegExStr + '$');
  var licenseIdRegEx = new RegExp('^' + licenseIdRegExStr + '$', 'i');
  var licenseIdRangeRegEx = new RegExp('^' + licenseIdRegExStr + rangeSeparatorRegExStr + licenseIdRegExStr + '$', 'i');
  var prefixRegEx = /^([^~～*x?#]+)(?:\*|x|\?|#){1,3}$/i;

  var query = { busId: [], licenseId: [] };
  var conditions = queryInput.split(/,|;|，|；|、|\s+/);
  conditions.forEach(function (condition) {
    var match = null;
    if (match = busIdRangeRegEx.exec(condition)) query.busId.push({ start: match[1] + '-' + match[2], end: match[3] + '-' + match[4] });else if (match = licenseIdRangeRegEx.exec(condition)) query.licenseId.push({ start: match[1], end: match[2] });else if (match = prefixRegEx.exec(condition)) {
      if (match[1].includes('-')) query.busId.push({ prefix: match[1] });else query.licenseId.push({ prefix: match[1] });
    } else if (match = busIdRegEx.exec(condition)) query.busId.push(match[1] + '-' + match[2]);else if (match = licenseIdRegEx.exec(condition)) query.licenseId.push(match[1]);
    // TODO: Is error handling necessary?
  });

  return query;
}

function findBusByQuery(query) {
  var resultList = document.getElementById('resultList');
  var busCountContainer = document.getElementById('bus_count_container');
  var busCount = document.getElementById('bus_count');
  removeChildren(resultList);
  var result = lineDataManager.queryBuses(convertBusQuery(query), currentStartDate, currentEndDate, true);
  if (result.lines.length > 0) {
    result.lines.forEach(function (line) {
      var option = document.createElement('option');
      option.value = line;
      option.appendChild(document.createTextNode(line));
      resultList.appendChild(option);
    });

    busCount.innerText = result.buses.length;
    busCountContainer.style.display = '';
  } else {
    busCountContainer.style.display = 'none';
  }
}

function showLinesNew(lineOrLines, lineData, showLineNames) {
  if (typeof lineOrLines == 'string') lineOrLines = [lineOrLines];

  var content = document.getElementById('content');
  var legend = document.getElementById('legend');
  removeChildren(content);
  removeChildren(legend);

  if (lineOrLines.length > PALETTE.length && !showLineNames) {
    content.appendChild(document.createTextNode('Too many lines selected!'));
    return;
  }

  if (!lineData && !lineDataManager.containsLines(lineOrLines)) {
    content.appendChild(document.createTextNode('Not all lines exist!'));
    return;
  }

  if (lineOrLines.length > 1) {
    lineOrLines.forEach(function (line, index) {
      var item = document.createElement('span');
      var span = document.createElement('span');
      span.style.backgroundColor = 'rgb(' + PALETTE[showLineNames ? index % PALETTE.length : index].join(',') + ')';
      span.style.height = '1em';
      span.style.width = '2em';
      span.style.display = 'inline-block';
      item.style.marginLeft = '3em';
      item.appendChild(span);
      item.appendChild(document.createTextNode(' ' + line));
      legend.appendChild(item);
    });
  }

  var data = lineData || lineDataManager.queryLines(lineOrLines, currentStartDate, currentEndDate);

  var table = document.createElement('table');
  table.appendChild(createTableHeader(data.buses));
  var tbody = document.createElement('tbody');
  data.details.forEach(function (day) {
    var tr = document.createElement('tr');
    var th = document.createElement('th');
    th.appendChild(document.createTextNode(day[0]));
    tr.appendChild(th);
    data.buses.forEach(function (bus, busIndex) {
      var td = document.createElement('td');
      tr.appendChild(td);
      var activeCount = 0;
      activeCount = day[1][busIndex].filter(function (weight) {
        return weight > 0;
      }).length;
      if (activeCount == 0) {
        if (showLineNames) {
          var span = document.createElement('span');
          span.className = 'line_view_bus_item';
          span.style.width = '100%';
          span.style.backgroundColor = 'rgb(' + COLOR_GREY.join(',') + ')';
          span.appendChild(document.createTextNode('\xA0'));
          td.appendChild(span);
        }
        return;
      }

      var first = true;
      day[1][busIndex].forEach(function (weight, lineIndex) {
        if (weight > 0) {
          var span = document.createElement('span');
          span.className = 'line_view_bus_item';
          span.style.width = 100 / activeCount + '%';
          span.setAttribute('data-line', lineOrLines[lineIndex]);
          if (showLineNames) {
            span.style.color = 'rgb(' + PALETTE[lineIndex % PALETTE.length];
            span.style.fontWeight = 'bold';
            span.style.backgroundColor = 'rgb(' + COLOR_GREY.map(function (value) {
              return parseInt((255 - value) * weight + value);
            }).join(',') + ')';
            var text = lineOrLines[lineIndex];
            if (first) {
              first = false;
            } else {
              text = '/' + text;
            }
            span.appendChild(document.createTextNode(text));
          } else {
            span.style.backgroundColor = 'rgb(' + (lineOrLines.length == 1 ? COLOR : PALETTE[lineIndex]).map(function (value) {
              return parseInt((255 - value) * (1 - weight) + value);
            }).join(',') + ')';
            span.appendChild(document.createTextNode('\xA0'));
          }
          td.appendChild(span);
        }
      });
    });
    tbody.appendChild(tr);
  });
  table.appendChild(tbody);
  content.appendChild(table);
}

function showLines(lines) {
  var content = document.getElementById('content');
  var legend = document.getElementById('legend');
  removeChildren(content);
  removeChildren(legend);

  if (lines.length > PALETTE.length) {
    content.appendChild(document.createTextNode('Too many lines selected!'));
    return;
  }

  if (lines.some(function (line) {
    return !lineData[line];
  })) {
    content.appendChild(document.createTextNode('Not all lines exist!'));
    return;
  }

  for (var i = 0; i < lines.length; ++i) {
    var item = document.createElement('span');
    var span = document.createElement('span');
    span.className = 'line_legend_item';
    span.style.backgroundColor = 'rgb(' + PALETTE[i].join(',') + ')';
    item.appendChild(span);
    item.appendChild(document.createTextNode(' ' + lines[i]));
    legend.appendChild(item);
  }

  var allBuses = [];
  var licenseIdSet = new Set();
  var lineDetailsMap = {};
  for (var i = 0; i < lines.length; ++i) {
    currentLineData = lineData[lines[i]];

    currentLineData.buses.forEach(function (bus) {
      if (!licenseIdSet.has(bus.licenseId)) {
        allBuses.push(bus);
        licenseIdSet.add(bus.licenseId);
      }
    });
    currentLineData.details.forEach(function (day) {
      if (!lineDetailsMap[day[0]]) {
        lineDetailsMap[day[0]] = {};
      }
      for (var j = 0; j < currentLineData.buses.length; ++j) {
        var licenseId = currentLineData.buses[j].licenseId;
        if (!lineDetailsMap[day[0]][licenseId]) lineDetailsMap[day[0]][licenseId] = new Array(lines.length).fill(0);
        lineDetailsMap[day[0]][licenseId][i] = day[1][j];
      }
    });
  }

  allBuses.sort(function (a, b) {
    if (a.busId && b.busId) {
      if (a.busId < b.busId) return -1;else if (a.busId > b.busId) return 1;else return 0;
    } else if (a.busId && !b.busId) // a < b
      return -1;else if (!a.busId && b.busId) // a > b
      return 1;else {
      if (a.licenseId < b.licenseId) return -1;else if (a.licenseId > b.licenseId) return 1;
      return 0;
    }
  });

  var table = document.createElement('table');
  table.appendChild(createTableHeader(allBuses));
  var tbody = document.createElement('tbody');
  Object.keys(lineDetailsMap).sort().forEach(function (date) {
    var tr = document.createElement('tr');
    var th = document.createElement('th');
    th.appendChild(document.createTextNode(date));
    tr.appendChild(th);
    allBuses.forEach(function (bus) {
      var td = document.createElement('td');
      tr.appendChild(td);
      var activeCount = 0;
      if (lineDetailsMap[date][bus.licenseId]) {
        activeCount = lineDetailsMap[date][bus.licenseId].filter(function (weight) {
          return weight > 0;
        }).length;
      }
      if (activeCount == 0) return;

      lineDetailsMap[date][bus.licenseId].forEach(function (weight, index) {
        if (weight > 0) {
          var span = document.createElement('span');
          span.style.height = '100%';
          span.style.width = 'calc(100%/' + activeCount + ')';
          span.style.display = 'inline-block';
          span.style.backgroundColor = 'rgb(' + PALETTE[index].map(function (value) {
            return parseInt((255 - value) * (1 - weight) + value);
          }).join(',') + ')';
          span.appendChild(document.createTextNode('\xA0'));
          span.setAttribute('data-line', lines[index]);
          td.appendChild(span);
        }
      });
    });
    tbody.appendChild(tr);
  });
  table.appendChild(tbody);
  content.appendChild(table);
}

function onChooseLine() {
  if (document.getElementById('compare').checked) {
    if (activeLines.includes(this.value)) return;
    activeLines.push(this.value);
    history.pushState(activeLines, '', '#' + activeLines.join('+'));
    showLinesNew(activeLines);
  } else {
    var line = this.value;
    activeLines = [line];
    showLinesNew(line);
    history.pushState(line, '', '#' + line);
  }
}

function parseUrlHash() {
  if (location.hash.replace('#', '')) {
    var hashValue = location.hash.replace('#', '');
    if (hashValue.includes('+')) {
      activeLines = hashValue.split('+');
      showLinesNew(activeLines);
    } else {
      activeLines = [hashValue];
      lineChooser.value = hashValue;
      showLinesNew(hashValue);
    }
    return true;
  }
}

function onModifyDate() {
  var startDate = document.getElementById('startDate');
  var endDate = document.getElementById('endDate');

  if (lineDataManager.isDateRangeValid(startDate.value, endDate.value) && (currentStartDate != startDate.value || currentEndDate != endDate.value)) {
    currentStartDate = startDate.value;
    currentEndDate = endDate.value;
    if (lineDataManager.isDataLoaded(currentStartDate, currentEndDate)) {
      showLinesNew(activeLines);
    } else {
      var progress = document.getElementById('progress');
      document.getElementById('progressbar').style.width = 0;
      progressbar.innerText = 'Loading...';
      progress.style.display = '';
      lineDataManager.load(currentStartDate, currentEndDate).then(function (_) {
        progress.style.display = 'none';
        updateLineChooser(lineDataManager.getLines());
        showLinesNew(activeLines);
      });
    }
  } else {
    startDate.value = currentStartDate;
    endDate.value = currentEndDate;
  }
}

function init() {
  var lineChooser = document.getElementById('lineChooser');
  var startDate = document.getElementById('startDate');
  var endDate = document.getElementById('endDate');

  lineDataManager.onUpdateProgress = function (items) {
    var progressbar = document.getElementById('progressbar');
    var progressValue = items.reduce(function (result, item) {
      return item.loaded ? ++result : result;
    }, 0) * 100 / items.length;
    progressbar.style.width = progressValue + '%';
    progressbar.innerText = 'Loading...' + Math.round(progressValue) + '%';
  };

  lineDataManager.load(currentStartDate, currentEndDate).then(function (_) {
    document.getElementById('progress').style.display = 'none';
    updateLineChooser(lineDataManager.getLines());
    if (!parseUrlHash()) {
      activeLines = [lineChooser.children[0].value];
      showLinesNew(activeLines);
    }
    loadRemoteManifest();
  });

  startDate.value = currentStartDate;
  endDate.value = currentEndDate;
  startDate.addEventListener('change', onModifyDate);
  endDate.addEventListener('change', onModifyDate);
  lineChooser.addEventListener('change', onChooseLine);
  document.getElementById('resultList').addEventListener('change', onChooseLine);
  window.onpopstate = function (e) {
    if (e.state instanceof Array) {
      activeLines = e.state;
      showLinesNew(activeLines);
    } else if (e.state) {
      activeLines = [e.state];
      showLinesNew(e.state);
    } else {
      parseUrlHash();
    }
  };
  document.getElementById('bus_query').addEventListener('input', function () {
    findBusByQuery(this.value);
  });
  document.getElementById('findDetails').addEventListener('click', function () {
    var result = lineDataManager.queryBuses(Object.assign({ lines: [].map.call(document.getElementById('resultList').children, function (option) {
        return option.value;
      }) }, convertBusQuery(document.getElementById('bus_query').value)), currentStartDate, currentEndDate, true);
    showLinesNew(result.lines, result, true);
  });

  function updateCellDetails(element, x, y) {
    var div = document.getElementById('cellDetails');
    if (div.style.display == 'none') return;

    var lineContainer = document.getElementById('cellLineContainer');
    var td = element;
    if (td.tagName.toLowerCase() == 'span') {
      td = td.parentElement;
      lineContainer.style.display = '';
      document.getElementById('cellLine').innerText = element.getAttribute('data-line');
    } else {
      lineContainer.style.display = 'none';
    }
    document.getElementById('cellDate').innerText = td.parentElement.children[0].innerText;
    var thead = document.getElementById('content').querySelector('table thead');
    document.getElementById('cellBusId').innerText = thead.children[0].children[td.cellIndex].innerText;
    document.getElementById('cellLicenseId').innerText = thead.children[1].children[td.cellIndex].innerText;
    div.style.left = x + document.body.scrollLeft + document.documentElement.scrollLeft + 8 + 'px';
    div.style.top = y + document.body.scrollTop + document.documentElement.scrollTop + 8 + 'px';
  }

  function toggleCellDetails() {
    var div = document.getElementById('cellDetails');
    div.style.display = div.style.display == 'none' && !document.getElementById('disableInfotip').checked ? '' : 'none';
  }

  document.getElementById('content').addEventListener('click', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if (tagName == 'span' || tagName == 'td') {
      toggleCellDetails();
      updateCellDetails(e.target, e.clientX, e.clientY);
    }
  });
  var touchStarted = false;
  var timer = null;
  document.getElementById('content').addEventListener('touchstart', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if ((tagName == 'span' || tagName == 'td') && e.touches.length == 1) {
      if (!touchStarted) {
        touchStarted = true;
        timer = window.setTimeout(function () {
          if (touchStarted) {
            toggleCellDetails();
            updateCellDetails(e.target, e.touches[0].clientX, e.touches[0].clientY);
            touchStarted = false;
            timer = null;
          }
        }, 1500);
      }
    }
  });
  document.getElementById('content').addEventListener('touchmove', function (e) {
    if (touchStarted) {
      touchStarted = false;
      window.clearTimeout(timer);
      timeout = null;
    }
  });
  document.getElementById('content').addEventListener('touchend', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if (tagName == 'span' || tagName == 'td' && e.touches.length == 1 && touchStarted) {
      e.preventDefault();
      updateCellDetails(e.target, e.touches[0].clientX, e.touches[0].clientY);
      touchStarted = false;
      window.clearTimeout(timer);
      timeout = null;
    }
  });
  document.getElementById('content').addEventListener('mouseover', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if (tagName == 'span' || tagName == 'td') {
      updateCellDetails(e.target, e.clientX, e.clientY);
    }
  });
}

(function () {
  var initialized = false;
  function initOnce() {
    if (!initialized) {
      init();
      initialized = true;
    }
  }
  document.onload = initOnce;
  document.onreadystatechange = function () {
    if (document.readyState == 'complete') initOnce();
  };
  document.addEventListener('DOMContentLoaded', initOnce);
})();

/*if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/service_worker.js');
} else {
  var iframe = document.createElement('iframe');
  iframe.style.display = 'none';
  iframe.src = 'appcache.html';
  document.body.appendChild(iframe);
}*/

//# sourceMappingURL=buses.legacy.min.js.map