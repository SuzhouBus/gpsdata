'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function createElement(tagName, childOrChildren, attributes) {
  var element = document.createElement(tagName);
  appendChildren(element, childOrChildren);
  var _iteratorNormalCompletion = true;
  var _didIteratorError = false;
  var _iteratorError = undefined;

  try {
    for (var _iterator = Object.entries(attributes || {})[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
      var _ref = _step.value;

      var _ref2 = _slicedToArray(_ref, 2);

      var name = _ref2[0];
      var value = _ref2[1];

      if (name == 'style' && (typeof value === 'undefined' ? 'undefined' : _typeof(value)) == 'object') {
        var _iteratorNormalCompletion2 = true;
        var _didIteratorError2 = false;
        var _iteratorError2 = undefined;

        try {
          for (var _iterator2 = Object.entries(value || {})[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _ref3 = _step2.value;

            var _ref4 = _slicedToArray(_ref3, 2);

            var styleKey = _ref4[0];
            var styleValue = _ref4[1];

            element.style[styleKey] = styleValue;
          }
        } catch (err) {
          _didIteratorError2 = true;
          _iteratorError2 = err;
        } finally {
          try {
            if (!_iteratorNormalCompletion2 && _iterator2['return']) {
              _iterator2['return']();
            }
          } finally {
            if (_didIteratorError2) {
              throw _iteratorError2;
            }
          }
        }
      } else {
        element.setAttribute(name == 'className' ? 'class' : name, value);
      }
    }
  } catch (err) {
    _didIteratorError = true;
    _iteratorError = err;
  } finally {
    try {
      if (!_iteratorNormalCompletion && _iterator['return']) {
        _iterator['return']();
      }
    } finally {
      if (_didIteratorError) {
        throw _iteratorError;
      }
    }
  }

  return element;
}

function appendChildren(parentElement, childOrChildren, internal) {
  if (!childOrChildren) return;
  if (typeof parentElement == 'string') parentElement = document.getElementById(parentElement);

  if (typeof childOrChildren == 'string') {
    parentElement.appendChild(document.createTextNode(childOrChildren));
  } else if (childOrChildren instanceof Node) {
    parentElement.appendChild(childOrChildren);
  } else if (childOrChildren.length && !internal) {
    [].forEach.call(childOrChildren, function (child) {
      return appendChildren(parentElement, child, true);
    });
  }

  return parentElement;
}

function removeChildren(parentElement) {
  if (typeof parentElement == 'string') parentElement = document.getElementById(parentElement);

  while (parentElement.hasChildNodes()) {
    parentElement.removeChild(parentElement.childNodes[0]);
  }
}

function replaceChildren(parentElement, childOrChildren) {
  if (typeof parentElement == 'string') parentElement = document.getElementById(parentElement);

  removeChildren(parentElement);
  appendChildren(parentElement, childOrChildren);
}

function fillSelect(select, labels, values) {
  if (typeof select == 'string') select = document.getElementById(select);

  removeChildren(select);
  labels.forEach(function (label, index) {
    var option = document.createElement('option');
    option.value = values ? values[index] || label : label;
    option.appendChild(document.createTextNode(label));
    select.appendChild(option);
  });
}
'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var DateUtils = function () {
  function DateUtils() {
    _classCallCheck(this, DateUtils);
  }

  DateUtils.formatNumber_ = function formatNumber_(number) {
    var result = number.toString();
    return result.length == 1 ? '0' + result : result;
  };

  DateUtils.formatDate = function formatDate(y, m, d) {
    var result = y.toString();
    if (m) {
      result += '-' + DateUtils.formatNumber_(m);
    }
    if (d) {
      result += '-' + DateUtils.formatNumber_(d);
    }
    return result;
  };

  DateUtils.toYearMonth = function toYearMonth(date) {
    var monthIndexMinusOne = date.indexOf('-');
    if (monthIndexMinusOne == -1) return date;
    var dayIndexMinusOne = date.indexOf('-', monthIndexMinusOne + 1);
    if (dayIndexMinusOne == -1) return date;
    return date.substr(0, dayIndexMinusOne);
  };

  DateUtils.nextMonth = function nextMonth(date) {
    var components = date.split('-').map(function (x) {
      return parseInt(x);
    });
    components[1]++;
    if (components[1] > 12) {
      components[0] += Math.floor(components[1] / 12);
      components[1] %= 12;
    }
    if (components[2] && components[2] > DateUtils.daysInMonthsMap_[components[1]]) components[2] = DateUtils.daysInMonthsMap_[components[1]];
    return DateUtils.formatDate.apply(null, components);
  };

  DateUtils.previousMonth = function previousMonth(date) {
    var components = date;
    if (typeof date == 'string') components = date.split('-').map(function (x) {
      return parseInt(x);
    });
    components[1]--;
    if (components[1] == 0) {
      components[0]--;
      components[1] = 12;
    }
    if (components[2] && components[2] > DateUtils.daysInMonthsMap_[components[1]]) components[2] = DateUtils.daysInMonth(components[1]);
    return DateUtils.formatDate.apply(null, components);
  };

  DateUtils.yesterday = function yesterday(date) {
    var components = date.split('-').map(function (x) {
      return parseInt(x);
    });
    components[2]--;
    if (components[2] == 0) {
      var ym = DateUtils.previousMonth(components.slice(0, 2));
      var ymc = ym.split('-').map(function (x) {
        return parseInt(x);
      });
      return ym + '-' + DateUtils.formatNumber_(DateUtils.daysInMonth(ymc[0], ymc[1]));
    }
    return DateUtils.formatDate.apply(null, components);
  };

  DateUtils.isLeapYear = function isLeapYear(year) {
    year = parseInt(year);
    return year % 400 == 0 || year % 100 != 0 && year % 4 == 0;
  };

  DateUtils.daysInMonth = function daysInMonth(year, month) {
    month = parseInt(month);
    return month == 2 && DateUtils.isLeapYear(year) ? 29 : DateUtils.daysInMonthsMap_[month];
  };

  return DateUtils;
}();

DateUtils.daysInMonthsMap_ = [undefined, // 0
31, // Jan
28, // Feb (NON LEAP YEAR)
31, // Mar
30, // Apr
31, // May
30, // Jun
31, // Jul
31, // Aug
30, // Sep
31, // Oct
30, // Nov
31];
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function wrapIDBRequest(request, extraHandlers) {
  return new Promise(function (resolve, reject) {
    request.onsuccess = function (_) {
      return resolve(request.result);
    };
    request.onerror = reject;
    if (extraHandlers) {
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = Object.entries(extraHandlers)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var _ref = _step.value;

          var _ref2 = _slicedToArray(_ref, 2);

          var eventName = _ref2[0];
          var handler = _ref2[1];

          request.addEventListener(eventName, handler);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator['return']) {
            _iterator['return']();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }
    }
  });
}

var Settings = function () {
  function Settings(component, backend) {
    var _this = this;

    _classCallCheck(this, Settings);

    this.component_ = component;
    if (window.indexedDB && backend != 'localStorage') {
      this.initPromise = wrapIDBRequest(indexedDB.open(Settings.DB_NAME, 2), {
        'upgradeneeded': function upgradeneeded(e) {
          _this.db_ = e.target.result;
          if (e.oldVersion < 1) {
            _this.db_.createObjectStore(Settings.OBJECT_STORE_NAME, { keyPath: ['component', 'key'] });
          }

          if (e.oldVersion < 2) {
            e.target.transaction.objectStore(Settings.OBJECT_STORE_NAME).createIndex('component', 'component', { unique: false });
          }
        }
      }).then(function (db) {
        return _this.db_ = db, 'indexedDB';
      });
    } else if (window.localStorage) {
      this.initPromise = Promise.resolve('localStorage');
    } else {
      this.initPromise = Promise.reject('No storage APIs are supported by this browser.');
    }
  }

  Settings.prototype.get = function get(key, defaultValue) {
    var _this2 = this;

    var keys = [];
    var result = {};
    var singleKey = false;
    if (typeof key == 'string' || typeof key == 'number' || typeof key == 'boolean') {
      // TODO: Do we need to distinguish between string and non-string keys?
      keys = [key.toString()];
      singleKey = true;
    } else if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) == 'object' && key instanceof Array) {
      keys = key;
    } else if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) == 'object') {
      keys = Object.keys(key);
      result = key;
    } else if (key != undefined) {
      return Promise.reject('Invalid argument.');
    }

    if (this.db_) {
      var objectStore = this.db_.transaction(Settings.OBJECT_STORE_NAME).objectStore(Settings.OBJECT_STORE_NAME);

      if (keys.length == 0) {
        return new Promise(function (resolve, reject) {
          var cursor = objectStore.index('component').openCursor(_this2.component_);
          cursor.onsuccess = function (e) {
            var cursor = e.target.result;
            if (cursor) {
              result[cursor.value.key] = cursor.value.value;
              cursor['continue']();
            } else {
              resolve(result);
            }
          };
          cursor.onerror = reject;
        });
      }

      return Promise.all(keys.map(function (key) {
        return wrapIDBRequest(objectStore.get([_this2.component_, key]));
      })).then(function (values) {
        for (var i = 0; i < keys.length; ++i) {
          if (values[i] === undefined && defaultValue && defaultValue[keys[i]]) {
            result[keys[i]] = defaultValue[keys[i]];
          } else if (values[i] != undefined) {
            result[keys[i]] = values[i].value;
          }
        }
        if (singleKey) return result[key];else return result;
      });
    } else if (window.localStorage) {
      var prefix = this.getLocalStorageKeyPrefix_();
      if (keys.length == 0) {
        for (var i = 0; i < localStorage.length; ++i) {
          var _key = localStorage.key(i);
          if (_key.substr(0, prefix.length) == prefix) keys.push(_key.substr(prefix.length));
        }
      }

      keys.forEach(function (key) {
        var value = localStorage.getItem(prefix + key);
        if (value === null && defaultValue && defaultValue[key]) {
          result[key] = defaultValue[key];
        } else if (value !== null) {
          result[key] = _this2.deserializeValue_(value);
        }
      });
      if (singleKey) return Promise.resolve(result[key]);else return Promise.resolve(result);
    }
  };

  Settings.prototype.set = function set(key, value) {
    var _this3 = this;

    var updates = {};
    if (typeof key == 'string' || typeof key == 'number' || typeof key == 'boolean') {
      // TODO: Do we need to distinguish between string and non-string keys?
      updates[key.toString()] = value;
    } else if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) == 'object' && key instanceof Array) {
      if (!value || key.length != value.length) return Promise.reject('Invalid argument. If |key| is an Array, |value| must be an Array with the same length.');
      for (var i = 0; i < key.length; ++i) {
        updates[key[i]] = value[i];
      }
    } else if (key && (typeof key === 'undefined' ? 'undefined' : _typeof(key)) == 'object') {
      updates = key;
    } else {
      return Promise.reject('Invalid argument.');
    }

    if (this.db_) {
      var transaction = this.db_.transaction(Settings.OBJECT_STORE_NAME, 'readwrite');
      return Promise.all(Object.keys(updates).map(function (key) {
        return wrapIDBRequest(transaction.objectStore(Settings.OBJECT_STORE_NAME).put({ component: _this3.component_, key: key, value: updates[key] }));
      }));
    } else if (window.localStorage) {
      var _iteratorNormalCompletion2 = true;
      var _didIteratorError2 = false;
      var _iteratorError2 = undefined;

      try {
        for (var _iterator2 = Object.entries(updates)[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
          var _ref3 = _step2.value;

          var _ref4 = _slicedToArray(_ref3, 2);

          var _key2 = _ref4[0];
          var _value = _ref4[1];

          localStorage.setItem(this.getLocalStorageKeyPrefix_() + _key2, this.serializeValue_(_value));
        }
      } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion2 && _iterator2['return']) {
            _iterator2['return']();
          }
        } finally {
          if (_didIteratorError2) {
            throw _iteratorError2;
          }
        }
      }

      return Promise.resolve();
    }
  };

  Settings.prototype.remove = function remove(key) {
    var _this4 = this;

    var keys = [];
    if (typeof key == 'string' || typeof key == 'number' || typeof key == 'boolean') {
      // TODO: Do we need to distinguish between string and non-string keys?
      keys = [key.toString()];
    } else if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) == 'object' && key instanceof Array) {
      keys = key;
    } else {
      return Promise.reject('Invalid argument.');
    }

    if (this.db_) {
      if (keys.length == 0) return Promise.resolve();
      var transaction = this.db_.transaction(Settings.OBJECT_STORE_NAME, 'readwrite');
      var removedKeys = [];
      return Promise.all(keys.map(function (key) {
        return wrapIDBRequest(transaction.objectStore(Settings.OBJECT_STORE_NAME)['delete']([_this4.component_, key])).then(function (_) {
          return removedKeys.push(key);
        });
      })).then(function (_) {
        return removedKeys;
      });
    } else if (window.localStorage) {
      keys.forEach(function (key) {
        return localStorage.removeItem(key);
      });
      return Promise.resolve();
    }
  };

  Settings.prototype.getLocalStorageKeyPrefix_ = function getLocalStorageKeyPrefix_() {
    return Settings.LOCAL_STORAGE_PREFIX + this.component_ + '.';
  };

  // TODO: Implement better serialization.


  Settings.prototype.serializeValue_ = function serializeValue_(value) {
    return JSON.stringify(value);
  };

  Settings.prototype.deserializeValue_ = function deserializeValue_(string) {
    return JSON.parse(string);
  };

  return Settings;
}();

Settings.DB_NAME = '_settings';
Settings.OBJECT_STORE_NAME = '_settings';
Settings.LOCAL_STORAGE_PREFIX = '_settings.';
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var LineDataManager = function () {
  function LineDataManager(manifest) {
    _classCallCheck(this, LineDataManager);

    this.manifest = manifest;
    this.loadedLineData_ = {};
    this.lineData_ = {};

    var today = new Date();
    today.setMinutes(today.getMinutes() - today.getTimezoneOffset());
    this.today_ = today.toISOString().substr(0, 10);

    this.earliestDate = Object.keys(manifest.archives || {}).map(function (source) {
      return manifest.archives[source].start_date;
    }).concat([manifest.start_date]).reduce(function (result, date) {
      return date < result ? date : result;
    }, '9999-99-99');
    // TODO: Use |last_update_time| in the standalane manifest.
    this.latestDate = this.today_;

    this.initializeLineNameMap_(manifest);
  }

  LineDataManager.prototype.initializeLineNameMap_ = function initializeLineNameMap_(manifest) {
    var _this = this;

    this.lineNameMap_ = {};
    var existingLines = {};
    manifest.sources.forEach(function (source) {
      _this.lineNameMap_[source] = {};
      if (manifest.lines[source]) {
        manifest.lines[source].forEach(function (lineName) {
          if (lineName != '__+BEGIN_LINES+__' && lineName != '__+END_LINES+__' && existingLines[lineName]) {
            var i = void 0;
            for (i = 2; existingLines[lineName + '_' + i]; ++i) {}
            existingLines[lineName + '_' + i] = true;
            _this.lineNameMap_[source][lineName] = lineName + '_' + i;
          } else {
            existingLines[lineName] = true;
          }
        });
      }
    });
  };

  LineDataManager.prototype.appendLineDataToLoad_ = function appendLineDataToLoad_(dataToLoad, month, sourceOrSources) {
    var _this2 = this;

    if (typeof sourceOrSources == 'string') sourceOrSources = [sourceOrSources];else if (sourceOrSources == undefined) {
      sourceOrSources = this.manifest.sources;
    }
    Array.prototype.push.apply(dataToLoad, sourceOrSources.filter(function (source) {
      return !_this2.loadedLineData_[month] || !_this2.loadedLineData_[month][source];
    }).map(function (source) {
      if (month == 'current') return { month: month, source: source, sizeHint: _this2.manifest.size_hints[source] };else if (_this2.manifest.archives[source] && _this2.manifest.archives[source].lengths) return { month: month, source: source, lengthTotal: _this2.manifest.archives[source].lengths[month], lengthAccurate: true };else return { month: month, source: source };
    }));
    return dataToLoad;
  };

  LineDataManager.prototype.isRangeOverlapped_ = function isRangeOverlapped_(start1, end1, start2, end2) {
    return start1 <= end2 && end1 >= start2;
  };

  LineDataManager.prototype.getDataToLoad_ = function getDataToLoad_(startDate, endDate) {
    var _this3 = this;

    var dataToLoad = [];
    if (this.isRangeOverlapped_(startDate, endDate, this.manifest.start_date, this.today_)) {
      this.appendLineDataToLoad_(dataToLoad, 'current');
    }

    if (startDate < this.manifest.start_date) {
      // [-inf, manifest.start_date) and [startDate, endDate] have intersection
      if (startDate < this.earliestDate) startDate = this.earliestDate;
      if (endDate >= this.manifest.start_date) endDate = DateUtils.yesterday(this.manifest.start_date);

      if (startDate <= endDate) {
        var startMonth = DateUtils.toYearMonth(startDate);
        var endMonth = DateUtils.toYearMonth(endDate);
        var archivedSources = Object.keys(this.manifest.archives || {}).map(function (source) {
          var result = Object.assign({}, _this3.manifest.archives[source], { name: source });
          result.start_month = DateUtils.toYearMonth(result.start_date);
          result.end_month = DateUtils.toYearMonth(result.end_date);
          return result;
        }).filter(function (source) {
          return _this3.isRangeOverlapped_(startDate, endDate, source.start_date, source.end_date);
        });

        var _loop = function _loop(currentMonth) {
          _this3.appendLineDataToLoad_(dataToLoad, currentMonth, archivedSources.filter(function (source) {
            return currentMonth >= source.start_month && currentMonth <= source.end_month;
          }).map(function (source) {
            return source.name;
          }));
        };

        for (var currentMonth = DateUtils.toYearMonth(startDate); currentMonth <= DateUtils.toYearMonth(endDate); currentMonth = DateUtils.nextMonth(currentMonth)) {
          _loop(currentMonth);
        }
      }
    }

    return dataToLoad;
  };

  LineDataManager.prototype.load = function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee3(startDate, endDate) {
      var _this4 = this;

      var dataToLoad, _loop2, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, item;

      return regeneratorRuntime.wrap(function _callee3$(_context4) {
        while (1) {
          switch (_context4.prev = _context4.next) {
            case 0:
              dataToLoad = this.getDataToLoad_(startDate, endDate);
              _loop2 = /*#__PURE__*/regeneratorRuntime.mark(function _loop2(item) {
                var path, length, lengthAccurate, fileName;
                return regeneratorRuntime.wrap(function _loop2$(_context3) {
                  while (1) {
                    switch (_context3.prev = _context3.next) {
                      case 0:
                        path = void 0;
                        length = item.lengthTotal || 0;
                        lengthAccurate = true;
                        fileName = item.month.replace('-', '') + '.json';

                        if (item.month == 'current') {
                          path = _this4.manifest.data[item.source];
                        } else {
                          path = _this4.manifest.archives[item.source].path + fileName;
                        }
                        _context3.next = 7;
                        return fetch(path).then(function () {
                          var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2(response) {
                            var contentEncoding, contentLength, _ret3;

                            return regeneratorRuntime.wrap(function _callee2$(_context2) {
                              while (1) {
                                switch (_context2.prev = _context2.next) {
                                  case 0:
                                    if (!(window.TextDecoder && response.body && response.body.getReader)) {
                                      _context2.next = 7;
                                      break;
                                    }

                                    if (!length) {
                                      contentEncoding = response.headers.get('Content-Encoding');
                                      contentLength = response.headers.get('Content-Length');

                                      if ((!contentEncoding || contentEncoding == 'identity') && contentLength) {
                                        length = contentLength;
                                      } else if (contentEncoding == 'gzip' && contentLength) {
                                        length = contentLength / (_this4.manifest.gzip_ratio_hint || 0.5);
                                        lengthAccurate = false;
                                      }
                                    }

                                    if (!length) {
                                      _context2.next = 7;
                                      break;
                                    }

                                    return _context2.delegateYield( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {
                                      var reader, done, decoder, json;
                                      return regeneratorRuntime.wrap(function _callee$(_context) {
                                        while (1) {
                                          switch (_context.prev = _context.next) {
                                            case 0:
                                              item.lengthTotal = length;
                                              item.lengthAccurate = lengthAccurate;
                                              item.lengthLoaded = 0;
                                              reader = response.body.getReader();
                                              done = false;
                                              decoder = new TextDecoder();
                                              json = '';

                                            case 7:
                                              if (done) {
                                                _context.next = 12;
                                                break;
                                              }

                                              _context.next = 10;
                                              return reader.read().then(function (result) {
                                                if (result.done) {
                                                  done = true;
                                                }
                                                if (result.value) {
                                                  json += decoder.decode(result.value, { stream: result.done });
                                                  item.lengthLoaded += result.value.length;
                                                  _this4.onUpdateProgress && _this4.onUpdateProgress(dataToLoad, item);
                                                }
                                              });

                                            case 10:
                                              _context.next = 7;
                                              break;

                                            case 12:
                                              return _context.abrupt('return', {
                                                v: JSON.parse(json)
                                              });

                                            case 13:
                                            case 'end':
                                              return _context.stop();
                                          }
                                        }
                                      }, _callee, _this4);
                                    })(), 't0', 4);

                                  case 4:
                                    _ret3 = _context2.t0;

                                    if (!((typeof _ret3 === 'undefined' ? 'undefined' : _typeof(_ret3)) === "object")) {
                                      _context2.next = 7;
                                      break;
                                    }

                                    return _context2.abrupt('return', _ret3.v);

                                  case 7:
                                    return _context2.abrupt('return', response.json());

                                  case 8:
                                  case 'end':
                                    return _context2.stop();
                                }
                              }
                            }, _callee2, _this4);
                          }));

                          return function (_x3) {
                            return _ref2.apply(this, arguments);
                          };
                        }()).then(function (data) {
                          if (!_this4.loadedLineData_[item.month]) _this4.loadedLineData_[item.month] = {};
                          _this4.loadedLineData_[item.month][item.source] = data;
                          _this4.importData_(item.month, item.source);
                          item.loaded = true;
                          _this4.onUpdateProgress && _this4.onUpdateProgress(dataToLoad, item);
                        })['catch'](function (_) {
                          return item.loaded = false;
                        }, Promise.resolve());

                      case 7:
                      case 'end':
                        return _context3.stop();
                    }
                  }
                }, _loop2, _this4);
              });
              _iteratorNormalCompletion = true;
              _didIteratorError = false;
              _iteratorError = undefined;
              _context4.prev = 5;
              _iterator = dataToLoad[Symbol.iterator]();

            case 7:
              if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
                _context4.next = 13;
                break;
              }

              item = _step.value;
              return _context4.delegateYield(_loop2(item), 't0', 10);

            case 10:
              _iteratorNormalCompletion = true;
              _context4.next = 7;
              break;

            case 13:
              _context4.next = 19;
              break;

            case 15:
              _context4.prev = 15;
              _context4.t1 = _context4['catch'](5);
              _didIteratorError = true;
              _iteratorError = _context4.t1;

            case 19:
              _context4.prev = 19;
              _context4.prev = 20;

              if (!_iteratorNormalCompletion && _iterator['return']) {
                _iterator['return']();
              }

            case 22:
              _context4.prev = 22;

              if (!_didIteratorError) {
                _context4.next = 25;
                break;
              }

              throw _iteratorError;

            case 25:
              return _context4.finish(22);

            case 26:
              return _context4.finish(19);

            case 27:
              return _context4.abrupt('return', dataToLoad);

            case 28:
            case 'end':
              return _context4.stop();
          }
        }
      }, _callee3, this, [[5, 15, 19, 27], [20,, 22, 26]]);
    }));

    function load(_x, _x2) {
      return _ref.apply(this, arguments);
    }

    return load;
  }();

  LineDataManager.prototype.importData_ = function importData_(month, source) {
    var _this5 = this;

    var data = this.loadedLineData_[month][source];
    Object.keys(data).forEach(function (line) {
      var lineName = _this5.lineNameMap_[source][line] || line;
      if (!_this5.lineData_[lineName]) _this5.lineData_[lineName] = {};
      _this5.lineData_[lineName][month] = data[line];
    });
  };

  LineDataManager.prototype.isDataLoaded = function isDataLoaded(startDate, endDate) {
    return this.getDataToLoad_(startDate, endDate).length == 0;
  };

  LineDataManager.prototype.getMonthsByRange_ = function getMonthsByRange_(startDate, endDate) {
    var _this6 = this;

    return Object.keys(this.loadedLineData_).filter(function (month) {
      if (month == 'current') {
        return _this6.isRangeOverlapped_(startDate, endDate, _this6.manifest.start_date, _this6.today_);
      } else {
        return DateUtils.toYearMonth(startDate) <= month && DateUtils.toYearMonth(endDate) >= month;
      }
    });
  };

  LineDataManager.prototype.queryLines = function queryLines(lineOrLines, startDate, endDate) {
    var _this7 = this;

    if (typeof lineOrLines == 'string') {
      lineOrLines = [lineOrLines];
    }

    var allBusesMap = {};
    var lineDetailsMap = {};

    lineOrLines.forEach(function (line, lineIndex) {
      _this7.getMonthsByRange_(startDate, endDate).sort().forEach(function (month) {
        // Note: 'current' is always sorted after yyyy-mm.
        var currentLineData = _this7.lineData_[line][month];
        if (!currentLineData) return;
        currentLineData.buses.forEach(function (bus) {
          if (!allBusesMap[bus.licenseId]) {
            allBusesMap[bus.licenseId] = Object.assign({}, bus);
          } else if (allBusesMap[bus.licenseId].busId != bus.busId) {
            allBusesMap[bus.licenseId].busId = bus.busId;
          }
        });

        currentLineData.details.filter(function (day) {
          return day[0] >= startDate && day[0] <= endDate;
        }).forEach(function (day) {
          if (!lineDetailsMap[day[0]]) {
            lineDetailsMap[day[0]] = {};
          }
          for (var i = 0; i < currentLineData.buses.length; ++i) {
            var licenseId = currentLineData.buses[i].licenseId;
            if (!lineDetailsMap[day[0]][licenseId]) lineDetailsMap[day[0]][licenseId] = new Array(lineOrLines.length).fill(0);
            var currentWeight = day[1][i];
            lineDetailsMap[day[0]][licenseId][lineIndex] = currentWeight;
            if (currentWeight > 0) {
              allBusesMap[licenseId]['hasWeight'] = true;
            }
          }
        });
      });
    });

    var buses = this.sortBuses_(Object.keys(allBusesMap).filter(function (licenseId) {
      return allBusesMap[licenseId]['hasWeight'];
    }).map(function (licenseId) {
      return allBusesMap[licenseId];
    }));

    var allZeroes = new Array(lineOrLines.length).fill(0);
    var details = Object.keys(lineDetailsMap).sort().map(function (date) {
      return [date, buses.map(function (bus) {
        return lineDetailsMap[date][bus.licenseId] || allZeroes;
      })];
    });

    return { buses: buses, details: details };
  };

  LineDataManager.prototype.containsLines = function containsLines(lineOrLines) {
    var _this8 = this;

    if (typeof lineOrLines == 'string') lineOrLines = [lineOrLines];
    return !lineOrLines.some(function (line) {
      return !_this8.lineData_[line];
    });
  };

  // query = {busId: [...], licenseId: [...], lines: [...]}
  // where |busId| and |licenseId| can contain:
  // * '1-1001' / '3G317'
  // * {start: '1-1001', end: '1-1008'}
  // * {prefix: '1-29'}
  // * {suffix: '*D'}
  //
  // Returns
  // {lines: [...], buses: [...], details: [...]}
  // where |buses| and |details| will be returned if returnDetails is true.


  LineDataManager.prototype.queryBuses = function queryBuses(query, startDate, endDate, returnDetails) {
    var _this9 = this;

    var linesSet = new Set();
    var allBusesMap = {};
    var busDetailsMap = {}; // busDetailsMap[date][licenseId][line] = weight

    (query.lines || Object.keys(this.lineData_)).forEach(function (line) {
      _this9.getMonthsByRange_(startDate, endDate).sort().forEach(function (month) {
        var currentLineData = _this9.lineData_[line][month];
        var currentLineDetails = null;
        if (!currentLineData) return;

        currentLineData.buses.forEach(function (bus, busIndex) {
          if (_this9.compareBus_(bus, query)) {
            if (!allBusesMap[bus.licenseId]) {
              allBusesMap[bus.licenseId] = Object.assign({}, bus);
            } else if (allBusesMap[bus.licenseId].busId != bus.busId) {
              allBusesMap[bus.licenseId].busId = bus.busId;
            }

            if (!currentLineDetails) currentLineDetails = currentLineData.details.filter(function (day) {
              return day[0] >= startDate && day[0] <= endDate;
            });
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
              for (var _iterator2 = currentLineDetails[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                var day = _step2.value;

                if (!busDetailsMap[day[0]]) {
                  busDetailsMap[day[0]] = {};
                }

                var weight = day[1][busIndex];
                if (weight > 0) {
                  if (!busDetailsMap[day[0]][bus.licenseId]) {
                    busDetailsMap[day[0]][bus.licenseId] = {};
                  }
                  busDetailsMap[day[0]][bus.licenseId][line] = weight;

                  linesSet.add(line);
                  if (!returnDetails) break;
                }
              }
            } catch (err) {
              _didIteratorError2 = true;
              _iteratorError2 = err;
            } finally {
              try {
                if (!_iteratorNormalCompletion2 && _iterator2['return']) {
                  _iterator2['return']();
                }
              } finally {
                if (_didIteratorError2) {
                  throw _iteratorError2;
                }
              }
            }
          }
        });
      });
    });

    var lines = this.sortLines_(Array.from(linesSet));
    if (!returnDetails) return { lines: lines };

    var buses = this.sortBuses_(Object.keys(allBusesMap).map(function (licenseId) {
      return allBusesMap[licenseId];
    }));
    var details = Object.keys(busDetailsMap).sort().map(function (date) {
      return [date, buses.map(function (bus) {
        return lines.map(function (line) {
          return (busDetailsMap[date][bus.licenseId] || {})[line] || 0;
        });
      })];
    });
    return { lines: lines, buses: buses, details: details };
  };

  LineDataManager.prototype.compareBus_ = function compareBus_(bus, query) {
    var result = false;
    ['busId', 'licenseId'].forEach(function (queryKey) {
      if (query[queryKey]) {
        result |= query[queryKey].some(function (queryDetails) {
          if (typeof queryDetails == 'string') {
            return bus[queryKey] == queryDetails;
          } else if (queryDetails.start && queryDetails.end) {
            return bus[queryKey] >= queryDetails.start && bus[queryKey] <= queryDetails.end;
          } else if (queryDetails.prefix) {
            return bus[queryKey].substr(0, queryDetails.prefix.length) == queryDetails.prefix;
          } else if (queryDetails.suffix) {
            return bus[queryKey].substr(-queryDetails.suffix.length) == queryDetails.suffix;
          }
        });
      }
    });
    return result;
  };

  LineDataManager.prototype.getLines = function getLines() {
    return this.sortLines_(Object.keys(this.lineData_));
  };

  LineDataManager.prototype.sortLines_ = function sortLines_(lines) {
    var _this10 = this;

    return lines.sort(function (a, b) {
      var pureNumberRegEx = /^[0-9]+$/;
      var lineNameParserRegEx = /^([A-Z]*)([0-9]*)([A-Z]*)(?:_([0-9]+))?$/;

      if (_this10.manifest.line_name_map) {
        if (_this10.manifest.line_name_map[a]) a = _this10.manifest.line_name_map[a];
        if (_this10.manifest.line_name_map[b]) b = _this10.manifest.line_name_map[b];
      }

      if (pureNumberRegEx.test(a) && pureNumberRegEx.test(b)) return _this10.compareNumbers_(a, b);

      a = { full: a };
      b = { full: b };
      [a, b].forEach(function (x) {
        var match = lineNameParserRegEx.exec(x.full);
        if (match && match[0]) {
          if (match[1]) x.prefixAlpha = match[1];
          if (match[2]) x.numberPart = match[2];
          if (match[3]) x.suffixAlpha = match[3];
          if (match[4]) x.copyNumber = match[4];
        } else x.other = true;
      });

      var result = _this10.compareWithoutCopyNumber_(a, b);
      return result == 0 ? _this10.compareNumbers_(a.copyNumber || -1, b.copyNumber || -1, 'natural') : result;
      // TODO: Sort special lines in the appropriate order. For example:
      // 10S < 10N < G1 < K8 < K8Z < Y1 < J1 < N1 < JLJ
    });
  };

  LineDataManager.prototype.compareWithoutCopyNumber_ = function compareWithoutCopyNumber_(a, b) {
    if (a.other && b.other) return this.defaultCompare_(a, b);
    if (a.other && !b.other) // |a|(other) > |b|(normal)
      return 1;
    if (!a.other && b.other) // |a|(normal) < |b|(other)
      return -1;

    // Here both a and b can be parsed into three optional parts.
    if (a.prefixAlpha && !b.prefixAlpha) // a(X1) > b(2)
      return 1;
    if (!a.prefixAlpha && b.prefixAlpha) // a(1) < b(X2)
      return -1;

    if (a.numberPart && !b.numberPart) // a(x1n) < b(yy)
      return -1;
    if (!a.numberPart && b.numberPart) // a(xx) > b(y2s)
      return 1;

    if (a.prefixAlpha && b.prefixAlpha && (!a.numberPart && !b.numberPart || a.prefixAlpha != b.prefixAlpha)) return this.defaultCompare_(a.prefixAlpha, b.prefixAlpha);

    // Here neither a nor b could have |prefixAlpha| or they have the same |prefixAlpha|, which can be ignored for further comparison.
    // If neither a nor b have |numberPart|, they must only have |prefixAlpha|, without |suffixAlpha|.
    // As a result, further comparisons compare |numberPart| first, then |suffixAlpha| if |numberPart| are the same.

    var result = this.compareNumbers_(a.numberPart, b.numberPart);

    if (result == 0) {
      var definedOrder = [undefined].concat(this.manifest.line_name_suffix_order || []);
      [a.suffixAlpha, b.suffixAlpha].sort().forEach(function (x) {
        return !definedOrder.includes(x) && definedOrder.push(x);
      });
      return this.defaultCompare_(definedOrder.indexOf(a.suffixAlpha), definedOrder.indexOf(b.suffixAlpha));
    }

    return result;
  };

  LineDataManager.prototype.compareNumbers_ = function compareNumbers_(a, b, sortOrder) {
    var plainSort = (sortOrder || this.linesSortOrder) == 'plain';
    if (plainSort && (!(typeof a === 'undefined' ? 'undefined' : _typeof(a)) == 'number' || !(typeof b === 'undefined' ? 'undefined' : _typeof(b)) == 'number')) {
      // 'plain' sorts by strings.
      a = a.toString();
      b = b.toString();
    } else if (!plainSort && (typeof a == 'string' || typeof b == 'string')) {
      // 'natural' sorts by numbers.
      a = parseInt(a);
      b = parseInt(b);
    }
    return this.defaultCompare_(a, b);
  };

  LineDataManager.prototype.defaultCompare_ = function defaultCompare_(a, b) {
    if (a < b) return -1;else if (a > b) return 1;else return 0;
  };

  LineDataManager.prototype.sortBuses_ = function sortBuses_(buses) {
    return buses.sort(function (a, b) {
      if (a.busId && b.busId) {
        // Buses with busId are sorted by busId.
        if (a.busId < b.busId) return -1;else if (a.busId > b.busId) return 1;else return 0;
      } else if (a.busId && !b.busId) // a < b, buses without busId is placed after all other buses with busId.
        return -1;else if (!a.busId && b.busId) // a > b, the same as above.
        return 1;else {
        // Buses without busId are sorted by licenseId.
        if (a.licenseId < b.licenseId) return -1;else if (a.licenseId > b.licenseId) return 1;
        return 0;
      }
    });
  };

  return LineDataManager;
}();

var COLOR = [0x5f, 0x8c, 0xb5];
var COLOR_GREY = [160, 160, 160];
var PALETTE = [[230, 25, 75], [60, 180, 75], [255, 225, 25], [0, 130, 200], [245, 130, 48], [145, 30, 180], [70, 240, 240], [240, 50, 230], [210, 245, 60], [250, 190, 190], [0, 128, 128], [170, 110, 40], [128, 0, 0], [170, 255, 195], [128, 128, 0], [0, 0, 128]];
var NBSP = '\xA0';
var lineDataManager = new LineDataManager(manifest);
var settings = new Settings('buses');
var currentStartDate = void 0;
var currentEndDate = void 0;
var progressText = '';
var activeLines = [];

(function () {
  var today = new Date();
  today.setMinutes(today.getMinutes() - today.getTimezoneOffset());
  currentEndDate = today.toISOString().substr(0, 10);
  var month = today.getMonth();
  today.setDate(today.getDate() - 30 + 1);
  currentStartDate = today.toISOString().substr(0, 10);
})();

function loadRemoteManifest() {
  fetch('manifest.json', { cache: 'no-cache' }).then(function (r) {
    return r.json();
  }).then(function (manifest) {
    document.getElementById('last_update_container').style.display = '';
    appendChildren('last_update_time', manifest.last_update_time);
  })['catch'](function (_) {
    document.getElementById('offline_prompt').style.display = '';
  });
}

function isBusIdContinuous(a, b) {
  if (a.substr(0, 2) != b.substr(0, 2)) return false;
  var ia = parseInt(a.substr(2));
  var ib = parseInt(b.substr(2));
  if (ia == ib + 1 || ib == ia + 1) return true;else if (a.substr(0, 2) == '5-' && (ia % 10 == 3 && ia + 2 == ib || ib % 10 == 3 && ib + 2 == ia)) return true;
  return false;
}

function convertLineName(line, options) {
  if (options.line_name_map && options.line_name_map[line]) return convertLineName(options.line_name_map[line], options);
  var match = /^([^0-9]*)([0-9]+)([^0-9_]*)(.*)$/.exec(line);
  if (match) {
    if (match[1] && options.line_name_prefix_map && options.line_name_prefix_map[match[1]]) {
      var prefix = options.line_name_prefix_map[match[1]];
      if (typeof prefix == 'string') {
        match[1] = prefix;
      } else {
        match[1] = prefix[0];
        match[2] += prefix[1];
      }
    }
    if (match[3] && options.line_name_suffix_map && options.line_name_suffix_map[match[3]]) {
      match[3] = '（' + options.line_name_suffix_map[match[3]] + '）';
    }

    return match[1] + match[2] + match[3] + match[4];
  }
  return line;
}

function updateLineChooser(lines) {
  fillSelect(document.getElementById('lineChooser'), lines.map(function (line) {
    return convertLineName(line, manifest);
  }), lines);
}

function createTableHeader(allBuses) {
  var allBusesTh = allBuses.map(function (current) {
    return createElement('th', current.busId);
  });

  // Label continous busIds in color.
  var i = 0;
  var inRange = false;
  var elementClass = '';
  for (var odd = false; i < allBuses.length; ++i) {
    elementClass = odd ? 'busid_odd_range_element' : 'busid_even_range_element';
    if (i > 0 && isBusIdContinuous(allBuses[i - 1].busId, allBuses[i].busId)) {
      if (inRange) {
        // The same range continues.
        allBusesTh[i - 1].className = elementClass;
      } else {
        // A new range begins.
        allBusesTh[i - 1].className = 'busid_range_begin ' + elementClass;
        inRange = true;
      }
    } else {
      if (inRange) {
        // The previous td is the end of the range.
        inRange = false;
        allBusesTh[i - 1].className = 'busid_range_end ' + elementClass;
        odd = !odd;
      }
    }
  }
  if (inRange) {
    // Mark the end of the last range.
    allBusesTh[i - 1].className = 'busid_range_end ' + elementClass;
  }

  return createElement('thead', [createElement('tr', [createElement('th', '自编号')].concat(_toConsumableArray(allBusesTh))), createElement('tr', ['车牌号'].concat(allBuses.map(function (bus) {
    return bus.licenseId;
  })).map(function (item, index) {
    return createElement('th', item);
  }))]);
}

function convertBusQuery(queryInput) {
  var rangeSeparatorRegExStr = '(?:~|～)';
  var busIdRegExStr = '([0-9])(?:0|-)([0-9]{4})';
  var licenseIdRegExStr = '(?:苏\s*E[^0-9A-Z]{0,4})?([0-9A-Z]{5}|[0-9]{5}(?:D|F))';
  var busIdRegEx = new RegExp('^' + busIdRegExStr + '$');
  var busIdRangeRegEx = new RegExp('^' + busIdRegExStr + rangeSeparatorRegExStr + busIdRegExStr + '$');
  var licenseIdRegEx = new RegExp('^' + licenseIdRegExStr + '$', 'i');
  var licenseIdRangeRegEx = new RegExp('^' + licenseIdRegExStr + rangeSeparatorRegExStr + licenseIdRegExStr + '$', 'i');
  var prefixRegEx = /^([^~～*?#]+)(?:\*|\?|#){1,3}$/;

  var query = { busId: [], licenseId: [] };
  var conditions = queryInput.split(/,|;|，|；|、|\s+/);
  conditions.forEach(function (condition) {
    var match = null;
    if (match = busIdRangeRegEx.exec(condition)) query.busId.push({ start: match[1] + '-' + match[2], end: match[3] + '-' + match[4] });else if (match = licenseIdRangeRegEx.exec(condition)) query.licenseId.push({ start: match[1].toUpperCase(), end: match[2].toUpperCase() });else if (match = prefixRegEx.exec(condition)) {
      if (match[1].includes('-')) query.busId.push({ prefix: match[1] });else query.licenseId.push({ prefix: match[1].toUpperCase() });
    } else if (match = busIdRegEx.exec(condition)) query.busId.push(match[1] + '-' + match[2]);else if (match = licenseIdRegEx.exec(condition)) query.licenseId.push(match[1].toUpperCase());else if (condition[0] == '*') query.licenseId.push({ suffix: condition.substr(1) });
    // TODO: Is error handling necessary?
  });

  return query;
}

function findBusByQuery(query) {
  var busCountContainer = document.getElementById('bus_count_container');
  var busCount = document.getElementById('bus_count');
  var result = lineDataManager.queryBuses(convertBusQuery(query), currentStartDate, currentEndDate, true);
  fillSelect(document.getElementById('resultList'), result.lines);
  if (result.lines.length > 0) {
    busCount.innerText = result.buses.length;
    busCountContainer.style.display = '';
  } else {
    busCountContainer.style.display = 'none';
  }
}

function showLinesNew(lineOrLines, lineData, showLineNames) {
  if (typeof lineOrLines == 'string') lineOrLines = [lineOrLines];

  if (lineOrLines.length > PALETTE.length && !showLineNames) {
    replaceChildren('content', '您选择的线路太多了！');
    return;
  }
  if (!lineData && !lineDataManager.containsLines(lineOrLines)) {
    replaceChildren('content', '某些线路不存在！');
    return;
  }

  removeChildren('legend');
  if (lineOrLines.length > 1) {
    appendChildren('legend', lineOrLines.map(function (line, index) {
      return createElement('span', [createElement('span', null, { style: {
          backgroundColor: 'rgb(' + PALETTE[index % PALETTE.length].join(',') + ')',
          height: '1em',
          width: '2em',
          display: 'inline-block',
          marginLeft: '3em'
        } }), ' ' + line]);
    }));
  }

  var data = lineData || lineDataManager.queryLines(lineOrLines, currentStartDate, currentEndDate);

  replaceChildren('content', createElement('table', [createTableHeader(data.buses), createElement('tbody', data.details.map(function (day) {
    return createElement('tr', [createElement('th', day[0])].concat(_toConsumableArray(data.buses.map(function (bus, busIndex) {
      var activeCount = day[1][busIndex].filter(function (weight) {
        return weight > 0;
      }).length;
      if (activeCount == 0) {
        return createElement('td', showLineNames ? [createElement('span', NBSP, {
          className: 'line_view_bus_item',
          style: {
            width: '100%',
            backgroundColor: 'rgb(' + COLOR_GREY.join(',') + ')'
          }
        })] : null);
      }

      var td = createElement('td');
      var first = true;
      day[1][busIndex].forEach(function (weight, lineIndex) {
        if (weight > 0) {
          var text = lineOrLines[lineIndex];
          if (first) {
            first = false;
          } else {
            text = '/' + text;
          }
          td.appendChild(createElement('span', showLineNames ? text : NBSP, {
            className: 'line_view_bus_item',
            style: Object.assign({
              width: 100 / activeCount + '%',
              backgroundColor: showLineNames ? 'rgb(' + COLOR_GREY.map(function (value) {
                return parseInt((255 - value) * weight + value);
              }).join(',') + ')' : 'rgb(' + (lineOrLines.length == 1 ? COLOR : PALETTE[lineIndex]).map(function (value) {
                return parseInt((255 - value) * (1 - weight) + value);
              }).join(',') + ')'
            }, showLineNames ? {
              color: 'rgb(' + PALETTE[lineIndex % PALETTE.length],
              fontWeight: 'bold'
            } : null),
            'data-line': lineOrLines[lineIndex]
          }));
        }
      });
      return td;
    }))));
  }))]));
}

function onChooseLine() {
  if (document.getElementById('compare').checked) {
    if (activeLines.includes(this.value)) return;
    activeLines.push(this.value);
    history.pushState(activeLines, '', '#' + activeLines.join('+'));
    showLinesNew(activeLines);
  } else {
    var line = this.value;
    activeLines = [line];
    showLinesNew(line);
    history.pushState(line, '', '#' + line);
  }
}

function parseUrlHash() {
  if (location.hash.replace('#', '')) {
    var hashValue = location.hash.replace('#', '');
    if (hashValue.includes('+')) {
      activeLines = hashValue.split('+');
      showLinesNew(activeLines);
    } else {
      activeLines = [hashValue];
      lineChooser.value = hashValue;
      showLinesNew(hashValue);
    }
    return true;
  }
}

function onModifyDate() {
  var startDate = document.getElementById('startDate');
  var endDate = document.getElementById('endDate');

  if (startDate.value < lineDataManager.earliestDate) startDate.value = lineDataManager.earliestDate;
  if (endDate.value > lineDataManager.latestDate) endDate.value = lineDataManager.latestDate;
  if (currentStartDate != startDate.value || currentEndDate != endDate.value) {
    currentStartDate = startDate.value;
    currentEndDate = endDate.value;
    if (lineDataManager.isDataLoaded(currentStartDate, currentEndDate)) {
      showLinesNew(activeLines);
    } else {
      var progress = document.getElementById('progress');
      document.getElementById('progressbar').style.width = 0;
      document.getElementById('progress_text').innerText = progressText;
      progress.style.display = '';
      lineDataManager.load(currentStartDate, currentEndDate).then(function (_) {
        progress.style.display = 'none';
        updateLineChooser(lineDataManager.getLines());
        showLinesNew(activeLines);
      });
    }
  } else {
    startDate.value = currentStartDate;
    endDate.value = currentEndDate;
  }
}

function init() {
  var lineChooser = document.getElementById('lineChooser');
  var startDate = document.getElementById('startDate');
  var endDate = document.getElementById('endDate');
  progressText = document.getElementById('progress_text').innerText;

  lineDataManager.onUpdateProgress = function (items, progressedItem) {
    var progressbar = document.getElementById('progressbar');
    var sizeHintItems = items.filter(function (item) {
      return item.sizeHint;
    });
    var sizeHintTotal = sizeHintItems.reduce(function (result, item) {
      return result += item.sizeHint;
    }, 0);
    var progressValue1 = sizeHintItems.reduce(function (result, item) {
      var weight = item.sizeHint / sizeHintTotal;
      if (item.loaded) {
        result += weight;
      } else if (item.lengthLoaded && item.lengthTotal) {
        if (item.lengthAccurate) {
          result += weight * item.lengthLoaded / item.lengthTotal;
        } else {
          result += weight * Math.min(item.lengthLoaded, item.lengthTotal * 0.95) / item.lengthTotal;
        }
      }
      return result;
    }, 0);
    var knownLengthItems = items.filter(function (item) {
      return item.lengthAccurate && !item.sizeHint;
    });
    var knownLengthTotal = knownLengthItems.reduce(function (result, item) {
      return result + item.lengthTotal;
    }, 0);
    var progressValue2 = knownLengthItems.reduce(function (result, item) {
      var weight = item.lengthTotal / knownLengthTotal;
      if (item.loaded) {
        result += weight;
      } else if (item.lengthLoaded) {
        result += weight * item.lengthLoaded / item.lengthTotal;
      }
      return result;
    }, 0);
    var progressValue = 100 * (progressValue1 * sizeHintItems.length / items.length + progressValue2 * knownLengthItems.length / items.length);
    progressbar.style.width = progressValue + '%';
    document.getElementById('progress_text').innerText = progressText + Math.round(progressValue) + '%';
  };

  lineDataManager.load(currentStartDate, currentEndDate).then(function (_) {
    document.getElementById('progress').style.display = 'none';
    updateLineChooser(lineDataManager.getLines());
    if (!parseUrlHash()) {
      activeLines = [lineChooser.children[0].value];
      showLinesNew(activeLines);
    }
    loadRemoteManifest();
  });

  startDate.value = currentStartDate;
  endDate.value = currentEndDate;
  startDate.addEventListener('change', onModifyDate);
  endDate.addEventListener('change', onModifyDate);
  lineChooser.addEventListener('change', onChooseLine);
  document.getElementById('resultList').addEventListener('change', onChooseLine);
  window.onpopstate = function (e) {
    if (e.state instanceof Array) {
      activeLines = e.state;
      showLinesNew(activeLines);
    } else if (e.state) {
      activeLines = [e.state];
      showLinesNew(e.state);
    } else {
      parseUrlHash();
    }
  };
  document.getElementById('bus_query').addEventListener('input', function () {
    findBusByQuery(this.value);
  });
  document.getElementById('findDetails').addEventListener('click', function () {
    var result = lineDataManager.queryBuses(Object.assign({ lines: [].map.call(document.getElementById('resultList').children, function (option) {
        return option.value;
      }) }, convertBusQuery(document.getElementById('bus_query').value)), currentStartDate, currentEndDate, true);
    showLinesNew(result.lines, result, true);
  });

  function updateCellDetails(element, x, y) {
    var div = document.getElementById('cellDetails');
    if (div.style.display == 'none') return;

    var lineContainer = document.getElementById('cellLineContainer');
    var td = element;
    if (td.tagName.toLowerCase() == 'span') {
      td = td.parentElement;
      lineContainer.style.display = '';
      document.getElementById('cellLine').innerText = element.getAttribute('data-line');
    } else {
      lineContainer.style.display = 'none';
    }
    document.getElementById('cellDate').innerText = td.parentElement.children[0].innerText;
    var thead = document.getElementById('content').querySelector('table thead');
    document.getElementById('cellBusId').innerText = thead.children[0].children[td.cellIndex].innerText;
    document.getElementById('cellLicenseId').innerText = thead.children[1].children[td.cellIndex].innerText;
    div.style.left = Math.min(x, window.innerWidth && div.clientWidth ? window.innerWidth - div.clientWidth - 30 : x) + document.body.scrollLeft + document.documentElement.scrollLeft + 8 + 'px';
    div.style.top = Math.min(y, window.innerHeight && div.clientHeight ? window.innerHeight - div.clientHeight - 30 : y) + document.body.scrollTop + document.documentElement.scrollTop + 8 + 'px';
  }

  function toggleCellDetails() {
    var div = document.getElementById('cellDetails');
    div.style.display = div.style.display == 'none' && !document.getElementById('disableInfotip').checked ? '' : 'none';
  }

  document.getElementById('content').addEventListener('click', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if (tagName == 'span' || tagName == 'td') {
      toggleCellDetails();
      updateCellDetails(e.target, e.clientX, e.clientY);
    }
  });
  var touchStarted = false;
  var timer = null;
  document.getElementById('content').addEventListener('touchstart', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if ((tagName == 'span' || tagName == 'td') && e.touches.length == 1) {
      if (!touchStarted) {
        touchStarted = true;
        timer = window.setTimeout(function () {
          if (touchStarted) {
            toggleCellDetails();
            updateCellDetails(e.target, e.touches[0].clientX, e.touches[0].clientY);
            touchStarted = false;
            timer = null;
          }
        }, 1500);
      }
    }
  });
  document.getElementById('content').addEventListener('touchmove', function (e) {
    if (touchStarted) {
      touchStarted = false;
      window.clearTimeout(timer);
      timeout = null;
    }
  });
  document.getElementById('content').addEventListener('touchend', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if (tagName == 'span' || tagName == 'td' && e.touches.length == 1 && touchStarted) {
      e.preventDefault();
      updateCellDetails(e.target, e.touches[0].clientX, e.touches[0].clientY);
      touchStarted = false;
      window.clearTimeout(timer);
      timeout = null;
    }
  });
  document.getElementById('content').addEventListener('mouseover', function (e) {
    var tagName = e.target ? e.target.tagName.toLowerCase() : '';
    if (tagName == 'span' || tagName == 'td') {
      updateCellDetails(e.target, e.clientX, e.clientY);
    }
  });

  return settings.initPromise.then(function (_) {
    var disableInfotip = document.getElementById('disableInfotip');

    disableInfotip.addEventListener('change', function () {
      settings.set({ disableInfotip: disableInfotip.checked });
    });

    return settings.get({ disableInfotip: false }).then(function (items) {
      disableInfotip.checked = !!items.disableInfotip;
    });
  });
}

(function () {
  var initialized = false;
  function initOnce() {
    if (!initialized) {
      init();
      initialized = true;
    }
  }
  document.onload = initOnce;
  document.onreadystatechange = function () {
    if (document.readyState == 'complete') initOnce();
  };
  document.addEventListener('DOMContentLoaded', initOnce);
})();

/*if ('serviceWorker' in navigator) {
  navigator.serviceWorker.register('/service_worker.js');
}*/

//# sourceMappingURL=buses.legacy.min.js.map